name: Main Workflow
on: [push, pull_request]
env:
  LLVM_VERSION: 15
jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [clang, gcc]
        build_type: [Debug, Release, MinSizeRel]
        include:
          - toolchain: gcc
            c-compiler: gcc
            cxx-compiler: g++
          - toolchain: clang
            c-compiler: clang
            cxx-compiler: clang++
    steps:
      - uses: actions/checkout@v3
      - run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          sudo apt update -y && sudo apt upgrade -y
          sudo apt-get -y install gcc-multilib g++-multilib clang-tidy-$LLVM_VERSION
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-$LLVM_VERSION 50
          clang-tidy --version
      - run: >
          cmake
          -B ${{ github.workspace }}/build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER=${{ matrix.c-compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }}
          tests
      - working-directory: ${{github.workspace}}/build
        run: make VERBOSE=1
      - working-directory: ${{github.workspace}}/build
        run: make test

  sonarcloud:
    if: >
      github.event_name == 'pull_request'                   ||
      contains(github.ref, '/master')                       ||
      contains(github.ref, '/release')                      ||
      contains(github.event.head_commit.message, '#sonar')
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.8.0.2856
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      CC: gcc
      CXX: g++
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - run: sudo apt install g++ g++-multilib gcc-multilib
    - uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: zulu
    - uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Download and set up sonar-scanner
      env:
        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
      run: |
        mkdir -p $HOME/.sonar
        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
      run: |
        curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
        unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
        echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
    # Pass NDEBUG to exclude assert() from coverage; see https://github.com/pavel-kirienko/o1heap/issues/9
    - name: Run build-wrapper
      run: |
        cmake tests -DCMAKE_BUILD_TYPE=Debug -DNO_STATIC_ANALYSIS=1 -DCMAKE_C_FLAGS='-DNDEBUG=1'
        build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make all
        make test
        gcov --preserve-paths --long-file-names $(find CMakeFiles/test_general_cov.dir -name '*.gcno')
        gcov --preserve-paths --long-file-names $(find CMakeFiles/test_private_cov.dir -name '*.gcno')
    # https://community.sonarsource.com/t/analyzing-a-header-only-c-library/51468
    - run: >
        sonar-scanner
        --define sonar.projectKey="pavel-kirienko_o1heap"
        --define sonar.organization="pavel-kirienko"
        --define sonar.sources="o1heap/"
        --define sonar.sourceEncoding="UTF-8"
        --define sonar.cfamily.gcov.reportsPath="."
        --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
        --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
        --define sonar.login=${{ secrets.SONAR_TOKEN }}
        $([ -z "$GITHUB_BASE_REF" ] && echo "--define sonar.branch.name=${GITHUB_REF##*/}" || true)

  style_check:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: DoozyX/clang-format-lint-action@v0.15
        with:
          source: './o1heap ./tests'
          exclude: './tests/catch'
          extensions: 'c,h,cpp,hpp'
          clangFormatVersion: ${{ env.LLVM_VERSION }}
