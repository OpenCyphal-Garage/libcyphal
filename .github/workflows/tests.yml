name: "libcyphal_test"

on:
  push:  # Further filtering is done in the jobs.
  pull_request:
    branches:
      - main
      - 'issue/*'

jobs:
  warmup:
    if: >
      contains(github.event.head_commit.message, '#verification') ||
      contains(github.event.head_commit.message, '#docs') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts22.4.7
    steps:
      - uses: actions/checkout@v4
      - name: Cache ext modules
        id: libcyphal-ext
        uses: actions/cache@v4
        env:
          cache-name: libcyphal-ext-cache
        with:
          path: external
          key: ${{ runner.os }}-${{ hashFiles('cmake/modules/*.cmake') }}
      - name: get nunavut
        # TODO: setup a venv, cache, and distribute to the other jobs.
        run: >
          pip install nunavut
      - name: configure
        run: >
          ./build-tools/bin/verify.py
          --verbose
          --asserts
          --online
          --cpp-standard 14
          --build-flavor Debug
          clean-configure
  verification:
    if: >
      contains(github.event.head_commit.message, '#verification') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts22.4.7
    needs: [warmup]
    strategy:
      matrix:
        build_flavor: [Release, Debug]
        std: [14, 17, 20]
        toolchain: [gcc, clang]
        include:
          - build_flavor: Coverage
            std: 14
            toolchain: gcc
    steps:
    - uses: actions/checkout@v4
    - name: Cache ext modules
      id: libcyphal-ext
      uses: actions/cache@v4
      env:
        cache-name: libcyphal-ext-cache
      with:
        path: external
        key: ${{ runner.os }}-${{ hashFiles('cmake/modules/*.cmake') }}
    - name: get nunavut
      run: >
        pip install nunavut
    - name: run tests
      env:
        GTEST_COLOR: yes
      run: >
        ./build-tools/bin/verify.py
        --verbose
        ${{ matrix.build_flavor != 'Coverage' && '--asserts' || '--no-exceptions' }}
        --cpp-standard ${{ matrix.std }}
        --build-flavor ${{ matrix.build_flavor }}
        --toolchain ${{ matrix.toolchain }}
        test
    - name: debug output
      if: ${{ runner.debug == '1' }}
      run: ls -lAhR build/
    - name: upload-artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.build_flavor }}-${{ matrix.std }}-${{ matrix.toolchain }}
        path: |
          build/compile_commands.json
          build/*/**/coverage.xml
          build/*/**/*-sonarqube.xml
          build/*/**/gcovr_html/*.*
        if-no-files-found: error

  sonarcloud:
    if: >
      contains(github.event.head_commit.message, '#sonar') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    needs:
      - verification
      - docs
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts22.4.7
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis by sonarqube.
      - name: Install sonar-scanner
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Cache ext modules
        id: libcyphal-ext
        uses: actions/cache@v4
        env:
          cache-name: libcyphal-ext-cache
        with:
          path: external
          key: ${{ runner.os }}-${{ hashFiles('cmake/modules/*.cmake') }}
      - uses: actions/download-artifact@v3
        with:
          name: Coverage-14-gcc
          path: build
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          sonar-scanner
          --define sonar.organization=opencyphal-garage
          --define sonar.projectKey=OpenCyphal-Garage_libcyphal
          --define sonar.projectName=libcyphal
          --define sonar.projectVersion=1.0
          --define sonar.sources=include,test/unittest/sonar.cpp
          --define sonar.tests=test/unittest,docs/examples
          --define sonar.test.inclusions=test_*.cpp,example_*.cpp
          --define sonar.sourceEncoding=UTF-8
          --define sonar.host.url=https://sonarcloud.io
          --define sonar.cfamily.ignoreHeaderComments=false
          --define sonar.coverage.exclusions="test/unittest/**/*,docs/examples/**/*,**/sonar.cpp"
          --define sonar.cpd.exclusions="test/unittest/**/*,docs/examples/**/*,**/sonar.cpp"
          --define sonar.cfamily.compile-commands="build/compile_commands.json"
          --define sonar.cfamily.reportingCppStandardOverride=c++14
          --define sonar.coverageReportPaths="build/test/unittest/coverage.xml,build/docs/examples/coverage.xml"
          --define sonar.testExecutionReportPaths="build/test/unittest/unittest-sonarqube.xml,build/docs/examples/examples-sonarqube.xml"
  docs:
    if: >
      contains(github.event.head_commit.message, '#docs') ||
      contains(github.ref, '/main') ||
      contains(github.ref, '/issue/') ||
      (github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts22.4.7
    needs: [warmup]
    steps:
    - uses: actions/checkout@v4
    - name: Cache ext modules
      id: libcyphal-ext
      uses: actions/cache@v4
      env:
        cache-name: libcyphal-ext-cache
      with:
        path: external
        key: ${{ runner.os }}-${{ hashFiles('cmake/modules/*.cmake') }}
    - name: get nunavut
      run: >
        pip install nunavut
    - name: doc-gen
      run: >
        ./build-tools/bin/verify.py
        --verbose
        --asserts
        --cpp-standard 14
        --build-flavor Debug
        build-docs
    - name: Setup Pages
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/configure-pages@v5
    - name: Upload docs
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/upload-pages-artifact@v3
      with:
        path: "build/docs/html/"
    - name: upload-pr-docs
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/upload-artifact@v4
      with:
        name: pr-docs
        path: "build/docs/html/"
        if-no-files-found: error
