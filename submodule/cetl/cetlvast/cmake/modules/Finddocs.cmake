#
# Copyright (C) OpenCyphal Development Team  <opencyphal.org>
# Copyright Amazon.com Inc. or its affiliates.
# SPDX-License-Identifier: MIT
#

#
# This treats the doxygen build for CETL as a standalone program. In
# reality the docs target is a doxygen build configured just for this project.
#


find_package(Doxygen REQUIRED)
find_program(TAR tar)

# +---------------------------------------------------------------------------+
# | DOXYGEN
# +---------------------------------------------------------------------------+
# TODO: all of this is really test-suite specific and should be refactored to
#       make it more reusable.
#
# :function: create_docs_target
# Create a target that generates documentation.
#
# :param str ARG_DOCS_TARGET_NAME:  The name to give the target created by this function.
#                                   This is also used as a prefix for sub-targets also
#                                   generated by this function.
# :param bool ARG_ADD_TO_ALL:       If true the target is added to the default build target.
# :param str ARG_EXAMPLES_PATH:     A path to example code to be included in the docs.
# :param list[str] ARG_DEPENDS:     A list of dependencies the docs build should take.
#
function (create_docs_target ARG_DOCS_TARGET_NAME ARG_ADD_TO_ALL ARG_EXAMPLES_PATH ARG_DEPENDS)

    set(DOXYGEN_SOURCE ${CETLVAST_PROJECT_ROOT}/suites/docs)
    set(DOXYGEN_RDOMAIN org.opencyphal)
    set(DOXYGEN_RDOMAIN_W_PROJECT org.opencyphal.cetl)
    set(DOXYGEN_PROJECT_NAME "CETL")
    set(DOXYGEN_PROJECT_BRIEF "Cyphal Embedded Template Library is a C++ shim library used by C++ Cyphal projects.")
    set(DOXYGEN_OUTPUT_DIRECTORY_PARENT ${CMAKE_BINARY_DIR})
    set(DOXYGEN_OUTPUT_DIRECTORY ${DOXYGEN_OUTPUT_DIRECTORY_PARENT}/cetlvast/suites/docs)
    set(DOXYGEN_CONFIG_FILE ${DOXYGEN_OUTPUT_DIRECTORY}/doxygen.config)
    set(DOXYGEN_EXAMPLE_PATH ${ARG_EXAMPLES_PATH})

    file(GLOB_RECURSE DOXYGEN_INPUT_LIST
        LIST_DIRECTORIES false
        CONFIGURE_DEPENDS
        ${CETL_ROOT}/include/**/*.hpp
    )

    list(APPEND DOXYGEN_INPUT_LIST "${CETL_ROOT}/README.md")
    list(APPEND DOXYGEN_INPUT_LIST "${CETL_ROOT}/SECURITY.md")
    list(JOIN DOXYGEN_INPUT_LIST "\\\n    " DOXYGEN_INPUT )
    set(DOXYGEN_MAINPAGE "\"${CETL_ROOT}/README.md\"")
    set(DOXYGEN_CETLVAST_VERSION $ENV{GITHUB_SHA})
    set(DOXYGEN_CETLVAST_INCLUDE_PREFIX_STRIP "\"${CETL_ROOT}/include\"")
    set(DOXYGEN_OUTPUT_TAGFILE "${DOXYGEN_OUTPUT_DIRECTORY}/cetl.tag.xml")
    set(DOXYGEN_COMPILE_COMMANDS_DIR ${CMAKE_BINARY_DIR})
    set(DOXYGEN_CLANG_OPTIONS "-I${CETL_ROOT}/include")

    # +-----------------------------------------------------------------------+
    # | HTML
    # +-----------------------------------------------------------------------+
    set(DOXYGEN_HTML_EXTRA_FILES "${DOXYGEN_SOURCE}/.nojekyll")
    set(DOXYGEN_HTML_STYLESHEET ${DOXYGEN_OUTPUT_DIRECTORY}/stylesheet.css)
    set(DOXYGEN_HTML_HEADER ${DOXYGEN_OUTPUT_DIRECTORY}/header.html)
    set(DOXYGEN_HTML_FOOTER ${DOXYGEN_OUTPUT_DIRECTORY}/footer.html)
    set(DOXYGEN_IMAGE_PATH ${DOXYGEN_SOURCE}/images)
    set(DOXYGEN_LOGO ${DOXYGEN_SOURCE}/images/html/opencyphal_logo.svg)
    set(DOXYGEN_TAGFILES "${DOXYGEN_SOURCE}/cppreference-doxygen-web.tag.xml=http://en.cppreference.com/w/")

    # a bit of a hack, but we copy all the images to the output to allow us to serve them
    # for anything other that the docs that wants them.
    file(COPY ${DOXYGEN_SOURCE}/images DESTINATION ${DOXYGEN_OUTPUT_DIRECTORY}/html)

    configure_file(${DOXYGEN_SOURCE}/header.html
                    ${DOXYGEN_OUTPUT_DIRECTORY}/header.html
                )
    configure_file(${DOXYGEN_SOURCE}/footer.html
                    ${DOXYGEN_OUTPUT_DIRECTORY}/footer.html
                )
    configure_file(${DOXYGEN_SOURCE}/stylesheet.css
                    ${DOXYGEN_OUTPUT_DIRECTORY}/stylesheet.css
                )
    configure_file(${DOXYGEN_SOURCE}/doxygen.ini
                    ${DOXYGEN_CONFIG_FILE}
                )
    add_custom_command(OUTPUT ${DOXYGEN_OUTPUT_DIRECTORY}/html/index.html
                        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_CONFIG_FILE}
                        DEPENDS
                            ${ARG_DEPENDS}
                            ${DOXYGEN_CONFIG_FILE}
                            ${DOXYGEN_INPUT_LIST}
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        COMMENT "Generating intermediate documentation."
                    )

    add_custom_target(${ARG_DOCS_TARGET_NAME} DEPENDS ${DOXYGEN_OUTPUT_DIRECTORY}/html/index.html)



endfunction(create_docs_target)

#
# :function: create_docs_tarball_target
# Create a target that uses the tar utility to package up all docs output.
#
# :param str ARG_DOCS_TARBALL_TARGET_NAME:  The name to give the target created by this function.
# :param bool ARG_ADD_TO_ALL:               If true the target is added to the default build target.
#
function (create_docs_tarball_target ARG_DOCS_TARBALL_TARGET_NAME ARG_ADD_TO_ALL)

    set(DOXYGEN_OUTPUT_DIRECTORY_PARENT ${CMAKE_BINARY_DIR})
    set(DOXYGEN_OUTPUT_DIRECTORY ${DOXYGEN_OUTPUT_DIRECTORY_PARENT}/cetlvast/suites/docs)

    add_custom_command(OUTPUT ${DOXYGEN_OUTPUT_DIRECTORY}/html.gz
                       COMMAND ${TAR} -vzcf html.gz ./html
                       DEPENDS ${DOXYGEN_OUTPUT_DIRECTORY}/html/index.html
                       WORKING_DIRECTORY ${DOXYGEN_OUTPUT_DIRECTORY}
                       COMMENT "Creating html tarball."
                    )

    if (ARG_ADD_TO_ALL)
        add_custom_target(${ARG_DOCS_TARBALL_TARGET_NAME} ALL DEPENDS ${DOXYGEN_OUTPUT_DIRECTORY}/html.gz)
    else()
        add_custom_target(${ARG_DOCS_TARBALL_TARGET_NAME} DEPENDS ${DOXYGEN_OUTPUT_DIRECTORY}/html.gz)
    endif()

endfunction(create_docs_tarball_target)

include(FindPackageHandleStandardArgs)

find_package_handle_standard_args(docs
    REQUIRED_VARS DOXYGEN_FOUND
)
