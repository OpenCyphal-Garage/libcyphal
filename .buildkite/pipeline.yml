steps:
  - label: ':hammer: native build and :mag: test using gcc'
    id: native-gcc-build-and-test
    command: "./ci/native-gcc-build-and-test.sh"
    artifact_paths:
      - "build_native_gcc/docs/html.gz"
      - "build_native_gcc/tests/coverage.info"
    plugins:
      - docker#v3.5.0:
          workdir: /repo
          image: "uavcan/c_cpp:ubuntu-18.04"
          propagate-environment: true
    env:
      VERBOSE: 1
    agents:
      queue: 'default'
    timeout_in_minutes: 15
  - label: ':hammer: native build and :mag: test using clang'
    id: native-clang-build
    command: "./ci/native-clang-build-and-test.sh"
    plugins:
      - docker#v3.5.0:
          workdir: /repo
          image: "uavcan/c_cpp:ubuntu-18.04"
          propagate-environment: true
    env:
      VERBOSE: 1
    agents:
      queue: 'default'
    timeout_in_minutes: 15
  - label: ':hammer: s32k build'
    id: ontarget-s32k-build
    command: "./ci/ontarget-s32k-build.sh"
    artifact_paths:
      - "build_ontarget_s32k/**/*.log"
      - "build_ontarget_s32k/**/*.elf"
      - "build_ontarget_s32k/**/*.hex"
      - "build_ontarget_s32k/**/*.bin"
      - "build_ontarget_s32k/**/*.jlink"
    plugins:
      - docker#v3.5.0:
          workdir: /repo
          image: "uavcan/c_cpp:ubuntu-18.04"
          propagate-environment: true
    env:
      VERBOSE: 1
    agents:
      queue: 'default'
    timeout_in_minutes: 15
  - wait
  - label: ":mag: ontarget testing"
    id: ontarget-s32k-test
    command: "/etc/buildkite-agent/hooks/command"
    agents:
      queue: "ontarget-s32k"
  - wait
  - label: ":github: post-build doc publishing"
    command: "./ci/postbuild-upload-docs.sh"
    plugins:
      - docker#v3.5.0:
          workdir: /repo
          image: "uavcan/c_cpp:ubuntu-18.04"
          propagate-environment: true
          mount-ssh-agent: true
    agents:
      queue: 'default'
    timeout_in_minutes: 15
    branches:
      uavcan-v1.0
    env:
      VERBOSE: 1
  - label: ":coverage: post-build coverage report"
    command: "./ci/postbuild-upload-coverage.sh"
    plugins:
      - docker#v3.5.0:
          workdir: /repo
          image: "uavcan/c_cpp:ubuntu-18.04"
          propagate-environment: true
          environment:
            - "SONARQUBE_TOKEN"
            - "BUILDKITE"
            - "BUILDKITE_BUILD_NUMBER"
    agents:
      queue: 'default'
    timeout_in_minutes: 15
    env:
      VERBOSE: 1
